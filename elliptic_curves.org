#+STARTUP: overview
#+latex_class_options: [12pt]

* Contents
:PROPERTIES:
:STARTUP: showall
:TOC:      :include all
:END:
:CONTENTS:
- [[#contents][Contents]]
- [[#affine-short-weierstrass-form][Affine Short Weierstrass form]]
  - [[#example][Example]]
- [[#point-at-infinity][Point at infinity]]
- [[#ec-group-law][EC group law]]
  - [[#geometric-interpretation-point-addition-chord-rule][Geometric interpretation: Point addition (chord rule)]]
  - [[#geometric-interpretation-point-doubling-tangent-rule][Geometric interpretation: Point doubling (tangent rule)]]
  - [[#explicit-formulas-for-the-group-law][Explicit formulas for the group law]]
  - [[#deriving-group-law-for-ecs-example-211][Deriving group law for ECs: Example 2.1.1]]
  - [[#deriving-group-law-for-ecs-example-212][Deriving group law for ECs: Example 2.1.2]]
- [[#order-of-an-elliptic-curve][Order of an Elliptic Curve]]
- [[#hasses-theorem][Hasse's theorem]]
  - [[#example][Example]]
- [[#order-of-a-point-on-an-elliptic-curve][Order of a point on an elliptic curve]]
  - [[#example][Example]]
  - [[#example-finding-points-of-a-given-order][Example: finding points of a given order]]
- [[#subgroup-p-generated-by-a-point-p][Subgroup $<P>$ Generated by a Point P]]
  - [[#example][Example]]
- [[#lagranges-theorem-for-elliptic-curves][Lagrange's theorem for Elliptic Curves]]
  - [[#example-lagranges-theorem-for-ecs][Example: Lagrange's theorem for ECs]]
  - [[#the-exponential-map][The exponential map]]
- [[#elliptic-curve-scalar-multiplication][Elliptic Curve scalar multiplication]]
- [[#projective-short-weierstrass-form][Projective Short Weierstrass form]]
  - [[#example][Example]]
  - [[#additional-materials][Additional materials]]
:END:

* Affine Short Weierstrass form
An *Elliptic Curve* (using short Weierstrass form) is an equation of the form:

$y^2=x^3+a \cdot x +b$

where:
- $a,b,x$ and $y$ are elements of some finite field.

Any $(x,y)$ satisfying the equation are points on the curve.

Thus Elliptic curve in affine space as a set of affine points together with the [[*Point at infinity][Point at infinity]]:

$E={(x,y) \in A^2(K) : y^2 = x^3 + ax +b} \hspace{.5em} \bigcup \hspace{.5em} {\mathcal{\{O\}}}$

** Example
We will define an EC over $F_{101}$ and set $a=0$.

#+BEGIN_SRC sage :session . :exports both
K = GF(101)
E = EllipticCurve(K,[0,0,0,0,3])
E
#+END_SRC

#+RESULTS:
: Elliptic Curve defined by y^2 = x^3 + 3 over Finite Field of size 101

* TODO Point at infinity
* IN-PROGRESS EC group law
** DONE Geometric interpretation: Point addition (chord rule)
Over any field a line (a degree one equation in $x$ and $y$) intersects a cubic equation (a degree three equation in $x$ and $y$) in three places.
In other words if we run a line:

$\ell: \hspace{.5em} y = \lambda x + \upsilon$

between two points $P=(x_P, y_P)$ and $Q=(x_Q,y_Q)$ on E, then substitute this line into:

$E: \hspace{.5em} y^2=x^3+ax+b$

will give a cubic polynomial in $x$:

#+BEGIN_SRC maxima :exports both :results output replace
eq1: y^2 = x^3 + a * x + b;
eq2: y = lambda * x + v;
eq3: subst(eq2,eq1);

print(expand(eq3));
#+END_SRC

#+RESULTS:
:  2       2                   2    3
: x  lambda  + 2 v x lambda + v  = x  + a x + b

The roots of which are the x-coordinates of the three points of intersection between $\ell$ and $E$.

Knowing the two roots ($x_P$ and $x_Q$) allows us to determine a unique third root that corresponds to the third point in the (affine) intersection $\ell \cap E$, which we denote $\textcircled{-}R$.
This point is then flipped over the x-axis to the point $R=P {\footnotesize \textcircled{+}} Q$.
The inverse of any element $R = (x_R , y_R )$ is taken as $\textcircled{-} R = (x_{R}, - y_{R} )$

#+name: chord-line
#+begin_src maxima :results graphics file :file chord-line.png :exports results
programmode: false;
/*E(x) := if x < 0 then -1*sqrt(x^3 -2*x) else sqrt(x^3 -2*x);*/
E1(x) := 1*sqrt(x^3 -2*x);
E2(x) := -1*sqrt(x^3 -2*x);
l(x) := x;
plot2d([E1,E2, l], [x, -5, 5], [y,-5,5], [png_file, "./chord-line.png"]);
#+end_src

#+RESULTS: chord-line
[[file:chord-line.png]]

** DONE Geometric interpretation: Point doubling (tangent rule)
When computing $R = P \textcircled{\\+} P$ , the line $\ell$ is computed as the tangent to E at P.
That is, the derivatives of $\ell$ and E are matched at P, so (counting multiplicities) $\ell$ intersects E twice at P.

#+begin_src maxima :results graphics file :file tangent-line.png :exports results
programmode: false;
/*E(x) := if x < 0 then -1*sqrt(x^3 -2*x) else sqrt(x^3 -2*x);*/
E1(x) := 1*sqrt(x^3 -2*x);
E2(x) := -1*sqrt(x^3 -2*x);
l(x) := -x/2-3/2;
plot2d([E1,E2, l], [x, -5, 5], [y,-5,5], [png_file, "./tangent-line.png"]);
#+end_src

#+RESULTS:
[[file:tangent-line.png]]

** IN-PROGRESS Explicit formulas for the group law

=Point doubling: [2]P=P+P=
The formula for doubling a point $P=(x_1,y_1)$ on $E: y^2=x^3+Ax+B$ is:

$2[P]=(x_3,y_3)$

where:

$x_3=m^2 - 2x_1$
$y_3=m \cdot (x_1-x_3) - y_1$

For $m=(\frac{3x_{1}^{2}+A}{2y_1})$ (the slope of the tangent line).

=Point inversion=
For $P=(x,y),\quad -P=(x,-y)$

=TODO Point addition: P+Q=S=

** DONE Deriving group law for ECs: Example 2.1.1

$E/\mathbb{R}: y^2=x^3-2x$

---

*NOTE*: finding $\ell$ for the chord rule

$\ell$ is a line that passes through $P=(x_1,y_1)$ and $Q=(x_2,y_2)$.
For example for P=(-1,-1) and Q=(0,0):

#+BEGIN_SRC maxima :exports both :results output replace
print(solve([-1=a*(-1)+b, 0=a*0+b], [a,b]));
#+END_SRC

#+RESULTS:
: [[a = 1, b = 0]]

Hence $\ell: y=x$

---

Points $(-1,-1)$, $(0,0)$ and $(2,2)$ are all on $E$ and also on the line $\ell$, therefore we use the [[*Geometric interpretation: Point addition (chord rule)][chord rule]]:

#+BEGIN_SRC maxima :exports both :results output replace
eq1: y^2=x^3-2*x;
eq2: y=x;
eq3: subst(eq2,eq1);

print(eq3);

print(allroots(eq3));
#+END_SRC

#+RESULTS:
:  2    3
: x  = x  - 2 x
: [x = 0.0, x = - 1.0, x = 2.0]

- Compute $(-1,-1) \textcircled{\\+} (0,0)$.

#+BEGIN_SRC maxima :exports both :results output replace
print(solve([y=x, y^2=x^3-2*x, x=2], [x,y]));
#+END_SRC

#+RESULTS:
: [[x = 2, y = 2]]

Flipping this over the x-axis we get $(2,-2)$

- Compute $(2,2) \textcircled{\\+} (0,0)$.

#+BEGIN_SRC maxima :exports both :results output replace
print(solve([y=x, y^2=x^3-2*x, x=-1], [x,y]));
#+END_SRC

#+RESULTS:
: [[x = - 1, y = - 1]]

Flipping this over the x-axis we get $(-1,1)$

- Compute $(-1,-1) \textcircled{\\+} (2,2)$.

#+BEGIN_SRC maxima :exports both :results output replace
print(solve([y=x, y^2=x^3-2*x, x=0], [x,y]));
#+END_SRC

#+RESULTS:
: [[x = 0, y = 0]]
Flipping this over the x-axis we get $(0,0)$
- Compute $[2](-1,-1)=(-1,-1) \textcircled{\\+} (-1,-1)$ (point doubling the "tangent rule")

To use the "tangent rule", we need to find the line tangent to E at (-1,-1).
We start by differentiating both sides of $y^2=x^3-2x$ with respect to x:

$y^2=x^3-2x \hspace{1em} |  \hspace{.5em} \frac{d}{dx}$

We want to find \frac{dy}{dx}.

- *left hand side.*

Here $y$ is a function of x (meaning $y=y(x)$).

$\frac{d}{dx}(y^2)=\frac{d}{dx}(y(x)^{2})$

$y=u^2, \hspace{1em} u=y(x)$

Using the [[file:arithmetics.org::*Chain rule differentiation][Chain rule]]:

$\frac{dy}{dx}=\frac{dy}{du} \cdot \frac{du}{dx}$

$\frac{d}{du}(u^2) \cdot \frac{d}{dx}(y(x))$

$2u \cdot \frac{d}{dx}(y(x))$

$2y(x) \cdot \frac{d(y(x))}{dx}$


$2y \cdot \frac{dy}{dx}$

- *right hand side.*

Straightforward differentiation:

$\frac{d}{dx}(x^3-2x)=3x^2-2$

Combining the results we get:

$2y\frac{dy}{dx}=3x^2-2$

Solving for $\frac{dy}{dx}$:

$\frac{dy}{dx}=\frac{3x^2-2}{2y}$

Evaluating at (-1,1):

$\frac{dy}{dx}=\frac{3(-1)^2-2}{2(-1)}=-\frac{1}{2}$

The slope $m$ of the tangent line is $-\frac{1}{2}$.

Using the point-slope form of the line:

$y - y_{1} = m(x - x_1)$

where $m=-\frac{1}{2}, \hspace{.5em} (x_1,y_1)=(-1,-1)$ we get:

$y-(-1)=-\frac{1}{2}(x-(-1))$

*Final answer*: The equation of the tangent line to the elliptic curve E: y^2=x^3-2x at (-1,1) is:

$\ell: y=-\frac{1}{2}x-\frac{3}{2}$

It intersects the curve $E$ once more:

#+BEGIN_SRC maxima :exports both :results output replace
print(solve([y=-(x+3)/2, y^2=x^3-2*x], [x,y]));
#+END_SRC

#+RESULTS:
:                           9        21
: [[x = - 1, y = - 1], [x = -, y = - --]]
:                           4        8

which gives:

$(-1,-1) \textcircled{\\+} (-1,-1) = (\frac{9}{4},-\frac{21}{8})$

$\square$

** DONE Deriving group law for ECs: Example 2.1.2
Same curve equation but over a finite field

$E(F_{23}): y^2=x^3-2x$

Find $(5,7) \textcircled{\\+} (8,10)$

1) Line that joins them is:

#+BEGIN_SRC maxima :exports both :results output replace
print(solve([7=a*5+b, 10=a*8+b], [a,b]));
#+END_SRC

#+RESULTS:
: [[a = 1, b = 2]]

$y=x+2$

Third point of intersection with E is:

#+BEGIN_SRC maxima :exports both :results output replace
print(solve([y=x+2, y^2=x^3-2*x], [x,y]));
#+END_SRC

#+RESULTS:
: [[x = - 1, y = 1], [x = 1 - sqrt(5), y = 3 - sqrt(5)],
:                                            [x = sqrt(5) + 1, y = sqrt(5) + 3]]

#+BEGIN_SRC sage :session . :exports both
F = GF(11)
E = EllipticCurve(F, [-2,0])
E

F(-2)
E(-1,1)
E(-1,-1)
#+END_SRC

#+RESULTS:
: Elliptic Curve defined by y^2 = x^3 + 9*x over Finite Field of size 11
: 9
: (10 : 1 : 1)
: (10 : 10 : 1)

Third point of intersection is S=(10,1)=(-1,1). Negating the y-coordinate gives it's inverse and we get $(5,7) \textcircled{\\+} (8,10) = (10,10)$

* Order of an Elliptic Curve
The order of an elliptic curve is the number $n$ of points on it (including the [[*Point at infinity][Point at infinity]]).

---
*NOTE*
The order of an elliptic curve over finite field need not be equal to the order of the field!

[[*Hasse's theorem][Hasse's theorem]] on elliptic curves, also referred to as the *Hasse bound*, provides an estimate of the number of points on an elliptic curve over a finite field, bounding the value both above and below.

---

* IN-PROGRESS Hasse's theorem
If N is the number of points on the elliptic curve E over a finite field with q elements, then Hasse's result states that:

${\displaystyle |N-(q+1)|\leq 2{\sqrt {q}}.}$
** TODO Example
* Order of a point on an elliptic curve
The *order of a point on an elliptic curve* is the smallest positive integer n such that

$[n]P=\mathcal{O}$

where:

- $P$ is a point on the elliptic curve,
- $[n]P$ denotes the point $P$ added to itself $n$ times,
- $\mathcal{O}$ is the identity element (the [[*Point at infinity][Point at infinity]]).

** Example
#+BEGIN_SRC sage :session . :exports both
F5=GF(5)
E_F5=EllipticCurve(F5, [0,0,0,1,1])

P=E_F5(0,1,1)
1*P
2*P
3*P
4*P
5*P
# ...
# equal point at infinity
9*P
# hence order of P is 9
P.order()
#+END_SRC

#+RESULTS:
: (0 : 1 : 1)
: (4 : 2 : 1)
: (2 : 1 : 1)
: (3 : 4 : 1)
: (3 : 1 : 1)
: (0 : 1 : 0)
: 9

---
*NOTES*

- The size of the finite field $F_q$ is q, but the order of the elliptic curve group $\#E(F_q)$ can be much larger than $q$. This means that the order of a point can also be larger than $q$
- The order of a point $P$ on the elliptic curve must divide the order of the EC group  $\#E(F_q)$. Thus, the maximum possible order of any point on the elliptic curve is $\#E(F_q)$.
---

** Example: finding points of a given order

Example below illustrates that there can be multiple points of a given order

#+BEGIN_SRC sage :session . :exports both
F5=GF(5)
E_F5=EllipticCurve(F5, [1,1])

# find all generators (of the full EC group)
generators = []
for P in E_F5.points():
    if P.order() == E_F5.order():
        generators.append(P)

# find all points of given order
E_order = E_F5.order()
for k in range(1,10):
  for P in generators:
    if Integer(k).divides(E_order):
      print("k: ", k, (E_order/k) * P)
#+END_SRC

#+RESULTS:
#+begin_example
k:  1 (0 : 1 : 0)
k:  1 (0 : 1 : 0)
k:  1 (0 : 1 : 0)
k:  1 (0 : 1 : 0)
k:  1 (0 : 1 : 0)
k:  1 (0 : 1 : 0)
k:  3 (2 : 1 : 1)
k:  3 (2 : 4 : 1)
k:  3 (2 : 4 : 1)
k:  3 (2 : 1 : 1)
k:  3 (2 : 4 : 1)
k:  3 (2 : 1 : 1)
k:  9 (0 : 1 : 1)
k:  9 (0 : 4 : 1)
k:  9 (3 : 1 : 1)
k:  9 (3 : 4 : 1)
k:  9 (4 : 2 : 1)
k:  9 (4 : 3 : 1)
#+end_example

* DONE Subgroup $<P>$ Generated by a Point P
1. Group structure
   - For an elliptic curve $E$ defined over a finite field $F_p$ the set of points on the curve, including the point at infinity $\mathcal{O}$ forms a *finite abelian group* under the point addition operation.
   - The order of that group is $r=|E|$, the total number of points on the curve (including the point at infinity $\mathcal{O}$).
2. Order of a point (see also [[OrderOfAPoint][Order of a point...]])
   - Every point $P$ on the EC generates a cyclic subgroup denoted $<P>$.
   - Order of a point is the smallest $k > 0$ such that $k\cdot P = \mathcal{O}$ (where $\mathcal{O}$, the point at infinity, is the group's identity element).
   - Order of a point P $k$ is therefore the size of the cyclic subgroup generated by $P$.

---
*NOTE*

Assume $E$ is finite and cyclic.
Not every point $P$ generates the whole group $E$: only the points with order $k=r$ do.

For example for $E$ with order 6 and a generator $G$ the group is:

$E = \{ \mathcal{O}, G, 2G, 3G, 4G, 5G \}$

their orders are:
- For $G$ $k=6$ since $6 \cdot G=\mathcal{O}$
- For $2G$ $k=3$ since $3 \cdot 2G=\mathcal{O}$
- For $3G$ $k=2$ since $2 \cdot 3G=\mathcal{O}$
- For $4G$ $k=3$ since $3*4G=12 \hspace{.5em} \text{mod} \hspace{.5em} 6 \cdot G= \mathcal{O}$
- For $5G$ $k=6 since $6*5G=30 \hspace{.5em} \text{mod} \hspace{.5em} 6 \cdot G= \mathcal{O}$

Hence only $G$ and $5G$ are the entire groups generators.

---

** Example
<P> is subgroup of order 17, 17*P=inf

#+BEGIN_SRC sage :session . :exports both
q=101
F = GF(q)
E = EllipticCurve(F,[0,0,0,0,3])
E

P = E(1,2)
for i in range(1,18):
    print(i,"* P =" , i*P)

# it is NOT the entire group generator
P.order() == E.order()
#+END_SRC

#+RESULTS:
#+begin_example
Elliptic Curve defined by y^2 = x^3 + 3 over Finite Field of size 101
1 * P = (1 : 2 : 1)
2 * P = (68 : 74 : 1)
3 * P = (26 : 45 : 1)
4 * P = (65 : 98 : 1)
5 * P = (12 : 32 : 1)
6 * P = (32 : 42 : 1)
7 * P = (91 : 35 : 1)
8 * P = (18 : 49 : 1)
9 * P = (18 : 52 : 1)
10 * P = (91 : 66 : 1)
11 * P = (32 : 59 : 1)
12 * P = (12 : 69 : 1)
13 * P = (65 : 3 : 1)
14 * P = (26 : 56 : 1)
15 * P = (68 : 27 : 1)
16 * P = (1 : 99 : 1)
17 * P = (0 : 1 : 0)
False
#+end_example

* Lagrange's theorem for Elliptic Curves
=Theorem=

If $P$ is a point on the curve $E$ then the order of $P$ $k$ divides the order of the curve $r=|E|$: $k \hspace{.5em} \text{divides} \hspace{.5em}  r$.

Implications for Scalar Multiplication on the EC:
- For any point $P$ on $E$ $r\cdot P = \frac{r}{k} k \cdot P = \mathcal{O}$.
- this is becasue $r$ is the groups order and multiplying any group element by the order yields the identity element.
- scalar multiplication is periodic with period $r$: $n\cdot P = (n \hspace{.5em} \text{mod} \hspace{.5em} r) \cdot P$

** Example: Lagrange's theorem for ECs
#+BEGIN_SRC sage :session . :exports both
q=5
Fq=GF(q)
E=EllipticCurve(Fq,[1,1])

r = E.order()
P = E.random_point()
k = P.order()

print(f"kP: {k} * {P} = {k*P}")
print(f"rP: {r} * {P} = {k*P}")
print(f"r | k: {r.divides(k)}")

(r+1)*P
((r+1)%r) *P
#+END_SRC

#+RESULTS:
: kP: 9 * (0 : 1 : 1) = (0 : 1 : 0)
: rP: 9 * (0 : 1 : 1) = (0 : 1 : 0)
: r | k: True
: (0 : 1 : 1)
: (0 : 1 : 1)
** TODO The exponential map
- [ ] 39
* Elliptic Curve scalar multiplication
Let $F$ be a finite field, $E(F)$ an elliptic curve of order $n$ and $P$ a generator of $E(F)$.
Then the elliptic curve scalar multiplication with base $P$ is defined as follows:

$[\cdot]P: Z_n \rightarrow E(F): m \mapsto [m]P$

where:
$[0]P=\mathcal{O}$ and $[m]P=P+P+...+P$ is the $m$-fold sum of $P$ with itself.

Therefore, elliptic curve scalar multiplication is an instantiation of the general [[*The exponential map][exponential map]] using additive instead of multiplicative notation.
* Projective Short Weierstrass form
---

*NOTE: Notation*

$A^n(K)$ : affine $n$-space over the field $K$

---

Instead of working with points in $n$-space, we now work with lines that pass through the origin in $(n+1)$-space.

This means affine points (see [[*Affine Short Weierstrass form][Affine Short Weierstrass form]]) in 2-space becomes lines in the $3$-space, namely that:

$(x,y) \in A^2(\bar{K})$ corresponds to the line defined by all points of the form:

$(\lambda x, \lambda y, \lambda) \in P^2(\bar{K})$,

where:
- $\lambda \in \bar{K}^{*}$.

That is, $P^2$ is $A^3 /\ \{(0, 0, 0)\}$ modulo the following congruence condition:

$(x_1, y_1, z_1 ) \sim (x_2, y_2, z_2)$

if there exists $\lambda \in \bar{K}^{*}$ such that $(x_1, y_1, z_1) = (\lambda x_2 , \lambda y_2, \lambda z_2)$.

There are many copies of $A^2$ in $P^2$ , but traditionally we map the affine point $(x, y) \in A^2$ to projective space via the trivial inclusion:

$(x, y) \rightarrow (x : y : 1)$,

and for any $(X : Y : Z) \neq \mathcal{O} \in P^2$ , we map back to $A^2$ via $(X : Y : Z ) \rightarrow  (X / Z, Y / Z)$.

The point at infinity $\mathcal{O}$ is represented by $(0 : 1 : 0)$ in the projective space.

The way we define the collection of points in projective space is to homogenise $E : y^2 = x^3 + a \cdot x + b$ by making the substitution $x = X / Z$ and $y = Y / Z$, and multiplying by $Z^3$ to clear the denominators, which gives the *projective Short Weierstrass form* of an elliptic curve:

$E_P = \{ [X : Y : Z] \in P \hspace{.5em} | \hspace{.5em} Y^2 \cdot Z = X^3 + a \cdot X \cdot Z^2 + b \cdot Z^3 \}$

** Example
#+BEGIN_SRC sage :session . :exports both
F13 = GF(13)
E_F13 = EllipticCurve(F13, [F13(0), F13(5)])
E_F13.order()

# there are 16 classes (X : Y : Z) \in P^2(F_13)
for p in E_F13:
    print(p)
#+END_SRC

#+RESULTS:
#+begin_example
16
(0 : 1 : 0)
(2 : 0 : 1)
(4 : 2 : 1)
(4 : 11 : 1)
(5 : 0 : 1)
(6 : 0 : 1)
(7 : 6 : 1)
(7 : 7 : 1)
(8 : 6 : 1)
(8 : 7 : 1)
(10 : 2 : 1)
(10 : 11 : 1)
(11 : 6 : 1)
(11 : 7 : 1)
(12 : 2 : 1)
(12 : 11 : 1)
#+end_example

The substitutions from the example above (x = X/Z, y = Y/Z) are the most simple (and standard) way to obtain projective coordinates,
but we are not restricted to this choice of substitution.

=Example=
#+BEGIN_SRC sage :session . :exports both
F41 = GF(41)
F41

P.<x,y,z> = ProjectiveSpace(F41, 2)

E = Curve([x^3*z + 4*x*z^3 - z^4], P);
E
#+END_SRC

#+RESULTS:
: Finite Field of size 41
: Projective Plane Curve over Finite Field of size 41 defined by x^3*z + 4*x*z^3 - z^4

** IN-PROGRESS Additional materials
- [ ] cofactor clearing: https://loup-vaillant.fr/tutorials/cofactor
- [X] https://www.youtube.com/watch?v=9TFEBuANioo
